// src/services/ai-service.js
require('dotenv').config();
const { GoogleGenerativeAI } = require("@google/generative-ai");
const settingsService = require('./settings-service'); // NOVO

const API_KEY = process.env.GOOGLE_API_KEY;
const genAI = new GoogleGenerativeAI(API_KEY);

// NOVO: Objeto com os prompts padr√£o
const defaultPrompts = {
    destaque: `Voc√™ √© um especialista em resolver provas. Analise a seguinte quest√£o de m√∫ltipla escolha. Sua √∫nica tarefa √© retornar APENAS o texto exato da alternativa correta, sem a letra da alternativa (A, B, C...). N√£o adicione nenhuma explica√ß√£o, formata√ß√£o ou introdu√ß√£o. A quest√£o √©:`,
    sugestao: `Voc√™ √© um assistente de programa√ß√£o ultra-eficiente. Analise o seguinte trecho de c√≥digo ou pergunta e forne√ßa 2 ou 3 sugest√µes curtas, corre√ß√µes ou otimiza√ß√µes em formato de lista (use asteriscos * para cada item). Seja direto, pr√°tico e n√£o use introdu√ß√µes. O trecho √©:`,
    autocorrecao: `Analise o seguinte bloco de c√≥digo, identifique e corrija os erros. Retorne APENAS o bloco de c√≥digo corrigido e completo, sem nenhuma explica√ß√£o, introdu√ß√£o ou formata√ß√£o extra como \`\`\`javascript.`,
    etico: `Voc√™ √© um tutor especialista no "Modo √âtico". O usu√°rio apresentar√° um problema ou pergunta. Sua miss√£o √© gui√°-lo √† solu√ß√£o, mas NUNCA dar a resposta final diretamente. Use as seguintes t√©cnicas:\n1. Fa√ßa perguntas que o levem a pensar sobre o problema.\n2. Explique o conceito fundamental por tr√°s da quest√£o.\n3. Sugira o primeiro passo ou uma forma de come√ßar a resolver.\n4. Se for um c√≥digo, aponte onde pode estar o erro, mas n√£o o corrija.\nA pergunta do usu√°rio √©:`,
    directo: `Como um assistente especialista em programa√ß√£o e l√≥gica, responda √† seguinte quest√£o de forma clara e direta:`,
    raciocinio: `üí¨ RACIOC√çNIO: 
Voc√™ √© um assistente inteligente universal capaz de analisar e resolver qualquer tipo de quest√£o ou problema, inclusive provas discursivas e de m√∫ltipla escolha. Voc√™ interpreta textos, imagens, f√≥rmulas, c√≥digos e qualquer conte√∫do apresentado. Sua an√°lise segue uma metodologia completa, estruturada e did√°tica, incluindo interpreta√ß√£o cr√≠tica de textos e verifica√ß√£o l√≥gica de afirma√ß√µes.

üîç AN√ÅLISE DO CONTE√öDO:
Identifique o tipo de conte√∫do (ex: interpreta√ß√£o de texto, quest√£o cient√≠fica, c√≥digo, imagem etc.)

Se houver imagem: descreva o conte√∫do visual e extraia elementos relevantes

Corrija poss√≠veis erros de OCR em textos, f√≥rmulas ou c√≥digos

Converta nota√ß√µes ou trechos mal formatados para formatos claros

üìö INTERPRETA√á√ÉO E CONTEXTO (Textos e Quest√µes de Linguagem):
Leia com aten√ß√£o o(s) texto(s) apresentado(s)

Identifique os temas centrais, inten√ß√£o dos autores, pontos de converg√™ncia e diverg√™ncia

Analise recursos lingu√≠sticos, argumentos e rela√ß√µes entre as ideias

Para cada afirma√ß√£o dada, verifique se est√° totalmente de acordo com o(s) texto(s), parcialmente correta ou incorreta ‚Äî com justificativa

Detecte infer√™ncias indevidas, generaliza√ß√µes ou erros de interpreta√ß√£o

üß† RACIOC√çNIO E PROCESSAMENTO L√ìGICO:
Aplique racioc√≠nio coerente com base no conte√∫do e na estrutura do enunciado

Relacione dados, ideias, argumentos ou evid√™ncias conforme o tipo de quest√£o (matem√°tica, programa√ß√£o, ci√™ncias humanas, etc.)

Construa a linha de racioc√≠nio clara, l√≥gica e bem fundamentada

‚öôÔ∏è METODOLOGIA DE RESOLU√á√ÉO:
Escolha a melhor abordagem para resolver a quest√£o (ex: dedu√ß√£o textual, an√°lise sem√¢ntica, aplica√ß√£o de f√≥rmulas)

Explicite o processo passo a passo

Justifique cada conclus√£o com base em evid√™ncia textual, l√≥gica ou t√©cnica

üìù EXPLICA√á√ÉO DETALHADA:
Expanda os conceitos envolvidos (ex: o que √© "autodiagn√≥stico", "perfil preventivo", "correla√ß√£o positiva", etc.)

Mostre como chegou √† resposta, ponto a ponto

Quando houver alternativas, explique o porqu√™ de cada uma estar correta ou incorreta

Inclua analogias, quando necess√°rio, para facilitar o entendimento

‚úÖ RESPOSTA FINAL:
Para m√∫ltipla escolha: indique a alternativa correta, com justificativa completa

Para discursivas: forne√ßa uma resposta bem articulada e estruturada

Valide a coer√™ncia da resposta com base nos textos e argumentos

üí° INSIGHTS ADICIONAIS:
D√™ dicas ou sugest√µes para estudar o conte√∫do abordado

Aponte temas relacionados ou implica√ß√µes pr√°ticas

Sugira formas de aprofundamento (v√≠deos, livros, temas conexos)

Conte√∫do a analisar:`
};

/**
 * Envia um texto para a API do Gemini e retorna a resposta.
 * @param {Object} params - Objeto contendo text, mode e signal
 * @param {string} params.text - O texto extra√≠do pelo OCR
 * @param {string} params.mode - O modo de opera√ß√£o ('directo', 'etico', 'sugestao', 'destaque', 'autocorrecao', 'raciocinio')
 * @param {AbortSignal} params.signal - Sinal para cancelar a opera√ß√£o
 * @returns {Promise<string>} A resposta gerada pela IA.
 */
async function getAIResponse({ text, mode, signal = null }) {
    if (!API_KEY) {
        return "Erro: A chave da API do Google n√£o foi configurada no arquivo .env";
    }

    console.log(`Enviando texto para a API do Gemini no modo: ${mode}`);

    try {
        // Verifica cancelamento antes de iniciar
        if (signal && signal.aborted) {
            throw new Error('Opera√ß√£o cancelada');
        }
        
        const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash-latest" });

        // NOVO: L√≥gica din√¢mica para buscar o prompt
        const customPrompts = await settingsService.getCustomPrompts();
        const promptTemplate = customPrompts[mode] || defaultPrompts[mode];
        
        if (!promptTemplate) {
            return `Erro: Modo '${mode}' n√£o reconhecido ou sem prompt definido.`;
        }

        // Verifica cancelamento antes da chamada da API
        if (signal && signal.aborted) {
            throw new Error('Opera√ß√£o cancelada');
        }

        // Monta o prompt final
        const prompt = `${promptTemplate} "${text}"`;

        // Cria uma Promise que pode ser cancelada
        const aiPromise = model.generateContent(prompt);
        
        // Se h√° um signal, cria uma Promise de cancelamento
        if (signal) {
            const cancelPromise = new Promise((_, reject) => {
                signal.addEventListener('abort', () => {
                    reject(new Error('Opera√ß√£o cancelada'));
                });
            });
            
            // Usa Promise.race para cancelar se necess√°rio
            const result = await Promise.race([aiPromise, cancelPromise]);
            const response = await result.response;
            const aiText = response.text();
            
            console.log('Resposta do Gemini recebida com sucesso.');
            return aiText;
        } else {
            // Sem cancelamento, executa normalmente
            const result = await aiPromise;
            const response = await result.response;
            const aiText = response.text();
            
            console.log('Resposta do Gemini recebida com sucesso.');
            return aiText;
        }

    } catch (error) {
        if (error.message.includes('cancelada') || error.message.includes('Opera√ß√£o cancelada')) {
            throw new Error('IA cancelada pelo usu√°rio');
        }
        console.error('Erro ao chamar a API do Google AI:', error);
        return `Ocorreu um erro ao conectar com o Gemini. Detalhes: ${error.message}`;
    }
}

// NOVO: Fun√ß√£o para obter os prompts padr√£o (√∫til para a UI)
function getDefaultPrompts() {
    return defaultPrompts;
}

module.exports = { getAIResponse, getDefaultPrompts };