const { GoogleGenerativeAI } = require("@google/generative-ai");
const settingsService = require('./settings-service');

// Configura√ß√µes dos provedores
const PROVIDERS = {
    gemini: {
        name: 'Google Gemini',
        models: {
            'gemini-2.5-pro': 'üåü Gemini 2.5 Pro (Mais Avan√ßado)',
            'gemini-2.5-flash': '‚ö° Gemini 2.5 Flash (Ultra R√°pido)',
            'gemini-2.0-flash-exp': 'üöÄ Gemini 2.0 Flash (Experimental)',
            'gemini-1.5-flash-latest': '‚ö° Gemini 1.5 Flash (Est√°vel)',
            'gemini-1.5-pro-latest': 'üíé Gemini 1.5 Pro (Avan√ßado)'
        }
    },
    openai: {
        name: 'OpenAI',
        models: {
            'gpt-4o': 'üß† GPT-4o (Mais Avan√ßado)',
            'gpt-4o-mini': '‚ö° GPT-4o Mini (R√°pido)',
            'gpt-4-turbo': 'üíé GPT-4 Turbo',
            'gpt-3.5-turbo': 'üí∞ GPT-3.5 Turbo (Econ√¥mico)'
        }
    },
    anthropic: {
        name: 'Anthropic Claude',
        models: {
            'claude-3-5-sonnet-20241022': 'üé≠ Claude 3.5 Sonnet (Mais Recente)',
            'claude-3-5-haiku-20241022': '‚ö° Claude 3.5 Haiku (R√°pido)',
            'claude-3-opus-20240229': 'üíé Claude 3 Opus (Mais Poderoso)',
            'claude-3-haiku-20240307': 'üí∞ Claude 3 Haiku (Econ√¥mico)'
        }
    },
    cohere: {
        name: 'Cohere',
        models: {
            'command-r-plus': 'üöÄ Command R+ (Avan√ßado)',
            'command-r': '‚ö° Command R (Padr√£o)',
            'command-light': 'üí∞ Command Light (Econ√¥mico)'
        }
    }
};

async function executeWithFallback(provider, operation, primaryModel, fallbackModel) {
    try {
        console.log(`[${provider.toUpperCase()}] Tentando com modelo principal: ${primaryModel}`);
        return await operation(primaryModel);
    } catch (error) {
        console.warn(`[${provider.toUpperCase()}] Erro com modelo principal (${primaryModel}):`, error.message);
        
        if (error.status === 404 || error.status === 400 || error.message.includes('model not found')) {
            console.log(`[${provider.toUpperCase()}] Tentando fallback para: ${fallbackModel}`);
            try {
                return await operation(fallbackModel);
            } catch (fallbackError) {
                console.error(`[${provider.toUpperCase()}] Erro tamb√©m no modelo fallback (${fallbackModel}):`, fallbackError.message);
                throw new Error(`Ambos os modelos falharam. Principal: ${error.message}, Fallback: ${fallbackError.message}`);
            }
        } else {
            throw error;
        }
    }
}

async function getAIResponse({ text, mode, signal = null }) {
    try {
        const apiSettings = await settingsService.getSetting('apiSettings');
        const provider = apiSettings?.provider || 'gemini';

        // Carrega os prompts padr√£o do arquivo ai-service.js
        const defaultPrompts = require('./ai-service').getDefaultPrompts();
        const customPrompts = await settingsService.getCustomPrompts();

        const promptTemplate = customPrompts[mode] || defaultPrompts[mode] || "Responda a seguinte quest√£o:";
        const prompt = `${promptTemplate} \"${text}\"`;

        const providerSettings = apiSettings[provider];

        // A verifica√ß√£o principal que estava causando o erro
        if (!providerSettings || !providerSettings.key) {
            // Esta mensagem agora ser√° mais precisa
            return `Erro: Provedor ${provider} n√£o configurado. Por favor, configure a chave da API nas Configura√ß√µes.`;
        }

        const models = {
            primary: providerSettings.model,
            fallback: providerSettings.fallbackModel
        };

        // Adiciona um AbortSignal para cancelar a requisi√ß√£o se necess√°rio
        const operationWithSignal = (modelName) => {
            const operation = async (model) => {
                if (signal && signal.aborted) {
                    throw new Error('Opera√ß√£o cancelada pelo usu√°rio');
                }
                const genAI = new GoogleGenerativeAI(providerSettings.key);
                const geminiModel = genAI.getGenerativeModel({ model });
                return await geminiModel.generateContent(prompt);
            };

            if (provider === 'gemini') {
                return executeWithFallback('gemini', operation, modelName, models.fallback);
            }
            // Adicione aqui a l√≥gica para outros provedores (OpenAI, etc.)
            throw new Error(`Provedor ${provider} n√£o suportado`);
        };

        switch (provider) {
            case 'gemini':
                console.log('Iniciando chamada Gemini com configura√ß√µes:', {
                    model: models.primary,
                    fallback: models.fallback,
                    prompt: prompt
                });
                const genAI = new GoogleGenerativeAI(providerSettings.key);
                const operation = async (modelName) => {
                    console.log('Tentando modelo:', modelName);
                    const model = genAI.getGenerativeModel({ 
                        model: modelName,
                        generationConfig: {
                            temperature: 0.7,
                            topK: 40,
                            topP: 0.95,
                            maxOutputTokens: 2048
                        }
                    });

                    let formattedPrompt;
                    if (mode === 'sugestoes') {
                        formattedPrompt = `${prompt}\n\nIMPORTANTE: Atue como um mentor especializado que guia atrav√©s de perguntas e dicas, adaptando-se a diferentes √°reas de conhecimento.\n\n` +
                        `√ÅREAS DE CONHECIMENTO:\n` +
                        `1. üìö Conte√∫do Educacional:\n` +
                        `   - Matem√°tica: teoremas, demonstra√ß√µes, f√≥rmulas\n` +
                        `   - F√≠sica: leis, princ√≠pios, experimentos\n` +
                        `   - Qu√≠mica: rea√ß√µes, compostos, equa√ß√µes\n` +
                        `   - Biologia: sistemas, processos, estruturas\n` +
                        `   - Hist√≥ria: eventos, per√≠odos, contextos\n` +
                        `   - Geografia: fen√¥menos, territ√≥rios, processos\n` +
                        `   - Literatura: an√°lises, interpreta√ß√µes, contextos\n` +
                        `   - L√≠nguas: gram√°tica, sintaxe, sem√¢ntica\n\n` +
                        `2. üìù Provas e Exerc√≠cios:\n` +
                        `   - Quest√µes dissertativas\n` +
                        `   - Problemas matem√°ticos\n` +
                        `   - Interpreta√ß√£o de texto\n` +
                        `   - An√°lise de dados\n` +
                        `   - Estudos de caso\n\n` +
                        `3. üíª Programa√ß√£o e Tecnologia:\n` +
                        `   - An√°lise de c√≥digo\n` +
                        `   - Algoritmos e estruturas de dados\n` +
                        `   - Padr√µes de projeto\n` +
                        `   - Debugging e otimiza√ß√£o\n` +
                        `   - Arquitetura de software\n\n` +
                        `4. üìä An√°lise e Pesquisa:\n` +
                        `   - Metodologia cient√≠fica\n` +
                        `   - An√°lise estat√≠stica\n` +
                        `   - Revis√£o bibliogr√°fica\n` +
                        `   - Coleta de dados\n` +
                        `   - Interpreta√ß√£o de resultados\n\n` +
                        `5. üåê Interface do GitHub:\n` +
                        `   - Estrutura do reposit√≥rio\n` +
                        `   - Hist√≥rico de commits\n` +
                        `   - Informa√ß√µes de arquivos\n` +
                        `   - Metadados do projeto\n` +
                        `   - Colaboradores e contribui√ß√µes\n\n` +
                        `6. üì∞ Not√≠cias e Informa√ß√µes:\n` +
                        `   - Manchetes e destaques\n` +
                        `   - An√°lise de contexto\n` +
                        `   - Fontes e credibilidade\n` +
                        `   - Impacto e relev√¢ncia\n` +
                        `   - Tend√™ncias e padr√µes\n\n` +
                        `7. üå°Ô∏è Previs√£o do Tempo:\n` +
                        `   - Condi√ß√µes clim√°ticas\n` +
                        `   - Alertas meteorol√≥gicos\n` +
                        `   - Temperaturas e varia√ß√µes\n` +
                        `   - Impactos locais\n` +
                        `   - Recomenda√ß√µes\n\n` +
                        `FUN√á√ïES PRINCIPAIS:\n` +
                        `1. üß† Perguntas Reflexivas:\n` +
                        `   - Fa√ßa perguntas espec√≠ficas da √°rea\n` +
                        `   - Estimule o pensamento cr√≠tico\n` +
                        `   - Guie a constru√ß√£o do conhecimento\n\n` +
                        `2. üß© Pistas T√©cnicas:\n` +
                        `   - Forne√ßa dicas contextualizadas\n` +
                        `   - Sugira m√©todos e ferramentas\n` +
                        `   - Indique recursos relevantes\n\n` +
                        `3. üîÅ Sugest√£o por Etapas:\n` +
                        `   - Divida problemas complexos\n` +
                        `   - Estabele√ßa sequ√™ncia l√≥gica\n` +
                        `   - Monitore o progresso\n\n` +
                        `4. ‚öôÔ∏è Adapta√ß√£o ao N√≠vel:\n` +
                        `   - Identifique conhecimento pr√©vio\n` +
                        `   - Ajuste complexidade das dicas\n` +
                        `   - Forne√ßa suporte personalizado\n\n` +
                        `5. üß≠ Caminho Sugerido:\n` +
                        `   - Proponha estrat√©gias espec√≠ficas\n` +
                        `   - Indique conex√µes importantes\n` +
                        `   - Destaque conceitos fundamentais\n\n` +
                        `6. ‚ùå Evite Respostas Diretas:\n` +
                        `   - Mantenha o foco na aprendizagem\n` +
                        `   - Estimule descobertas pr√≥prias\n` +
                        `   - Valorize o processo\n\n` +
                        `Sua resposta deve ser um objeto JSON v√°lido com a seguinte estrutura:\n{\n` +
                        `  "domain": "", // üìö √Årea de conhecimento identificada\n` +
                        `  "content_type": "", // üìù Tipo de conte√∫do (prova, c√≥digo, etc)\n` +
                        `  "difficulty_level": "", // ‚öôÔ∏è N√≠vel de dificuldade detectado\n` +
                        `  "prerequisites": [], // üìã Conhecimentos pr√©vios necess√°rios\n` +
                        `  "key_concepts": [], // üîë Conceitos fundamentais\n` +
                        `  "reflexive_questions": [], // üß† Perguntas para reflex√£o\n` +
                        `  "technical_hints": [], // üß© Dicas t√©cnicas contextualizadas\n` +
                        `  "step_suggestions": [], // üîÅ Sugest√µes de passos\n` +
                        `  "learning_resources": [], // üìö Recursos de aprendizagem\n` +
                        `  "suggested_path": [], // üß≠ Caminho de racioc√≠nio\n` +
                        `  "progress_markers": [], // üìç Marcos de progresso\n` +
                        `  "common_mistakes": [], // ‚ö†Ô∏è Erros comuns a evitar\n` +
                        `  "validation_points": [], // ‚úÖ Pontos de verifica√ß√£o\n` +
                        `  "encouragement": [] // üåü Mensagens motivacionais\n` +
                        `}`;
                    } else {
                        formattedPrompt = prompt;
                    }

                    const result = await model.generateContent(formattedPrompt, { signal });
                    console.log('Resposta recebida:', result);
                    return result;
                };
                
                const result = await executeWithFallback('gemini', operation, models.primary, models.fallback);
                const response = await result.response;
                const text = response.text();

                // Processamento da resposta
                if (mode === 'directo') {
                    return text;
                } else if (mode === 'sugestoes') {
                    try {
                        const parsedJson = JSON.parse(text);
                        return JSON.stringify(parsedJson);
                    } catch (error) {
                        console.error('Erro ao processar JSON do modo sugest√µes:', error);
                        console.error('Texto recebido:', text);
                        
                        return JSON.stringify({
                            domain: "error",
                            content_type: "error_report",
                            difficulty_level: "n/a",
                            prerequisites: [],
                            key_concepts: [],
                            reflexive_questions: [
                                "ü§î O conte√∫do fornecido est√° no formato esperado?",
                                "üìù As instru√ß√µes foram seguidas corretamente?",
                                "üîÑ Vale a pena tentar novamente com uma entrada diferente?"
                            ],
                            technical_hints: [
                                "üìã Verifique se o texto de entrada √© v√°lido",
                                "üîç Certifique-se de que o modo sugest√µes √© apropriado para este conte√∫do",
                                "‚öôÔ∏è Considere usar outro modo de an√°lise"
                            ],
                            step_suggestions: [
                                "1. Verifique o formato do conte√∫do",
                                "2. Tente reformular a entrada",
                                "3. Considere usar o modo direto"
                            ],
                            learning_resources: [],
                            suggested_path: [],
                            progress_markers: [],
                            common_mistakes: [],
                            validation_points: [],
                            encouragement: [
                                "‚ú® N√£o desanime, vamos tentar de outra forma!",
                                "üí™ Cada tentativa nos aproxima da solu√ß√£o ideal"
                            ]
                        });
                    }
                } else {
                    return text; // Adicionando return expl√≠cito aqui

                }
                case 'openai': // Fixing indentation
                // Implementar chamada para OpenAI aqui
                throw new Error('OpenAI ainda n√£o implementado');

                case 'anthropic':
                // Implementar chamada para Anthropic aqui
                throw new Error('Anthropic ainda n√£o implementado');

                case 'cohere':
                // Implementar chamada para Cohere aqui
                throw new Error('Cohere ainda n√£o implementado');

                default:
                throw new Error(`Provedor ${provider} n√£o suportado`);
        }
    } catch (error) {
        console.error(`Erro em getAIResponse:`, error);
        if (error.message.includes('cancelada')) {
            return 'An√°lise cancelada.';
        }
        return `Ocorreu um erro ao conectar com a IA. Detalhes: ${error.message}`;
    }
}

async function testApiKey(provider, key, model) {
    try {
        if (!provider || !key || !model) {
            const missingParams = [];
            if (!provider) missingParams.push('provedor');
            if (!key) missingParams.push('chave');
            if (!model) missingParams.push('modelo');
            
            return { 
                success: false, 
                message: `Par√¢metros inv√°lidos: ${missingParams.join(', ')} s√£o obrigat√≥rios` 
            };
        }

        const providerConfig = PROVIDERS[provider];
        if (!providerConfig) {
            return { 
                success: false, 
                message: `Provedor ${provider} n√£o encontrado. Provedores dispon√≠veis: ${Object.keys(PROVIDERS).join(', ')}` 
            };
        }

        if (!providerConfig.models[model]) {
            const availableModels = Object.keys(providerConfig.models)
                .map(m => `${m} (${providerConfig.models[m]})`)
                .join('\n- ');
            return { 
                success: false, 
                message: `Modelo ${model} n√£o encontrado para o provedor ${provider}. \n\nModelos dispon√≠veis para ${providerConfig.name}:\n- ${availableModels}` 
            };
        }

        if (provider === 'gemini') {
            try {
                const genAI = new GoogleGenerativeAI(key);
                const geminiModel = genAI.getGenerativeModel({ model });
                await geminiModel.generateContent('Test connection');
                return { 
                    success: true, 
                    message: 'Conex√£o com Gemini estabelecida com sucesso!' 
                };
            } catch (error) {
                const errorMsg = error.message || 'Erro desconhecido';
                return { 
                    success: false, 
                    message: `Erro ao conectar com Gemini: ${errorMsg}` 
                };
            }
        }

        return { 
            success: false, 
            message: `Teste para o provedor ${provider} ainda n√£o implementado` 
        };
    } catch (error) {
        const errorMsg = error.message || 'Erro desconhecido';
        return { 
            success: false, 
            message: `Erro ao testar conex√£o: ${errorMsg}` 
        };
    }
}

function getAvailableProviders() {
    return PROVIDERS;
}

module.exports = {
    getAIResponse,
    testApiKey,
    getAvailableProviders
};